@page "/"

<PageTitle>Rover Command</PageTitle>

@implements IDisposable
@using RoverBlazor.Data
@using RoverInterface
@inject RoverCom Rover
@inject IJSRuntime JS



<h1>Rover Command</h1>

@if(Error != null)
{
    <p><em>@Error</em></p>
}
else if (Messages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="MessageBox">
        @foreach (var message in Messages)
        {
            <p class="RoverMessage" style="color:@message.Color">@message.Message</p>
        }
    </div>
}

<input class="CommandInput" @bind="InputValue" @bind:event="oninput" @onkeydown="@OnKeyDown" />
<br />
    <button @onclick="@OnClickSend">Send</button>
    <button @onclick="@(() => OnClickCommand("RUN"))">Run command queue</button>
    <button @onclick="@(() => OnClickCommand("LIST"))">List command queue</button>
    <button @onclick="@(() => OnClickCommand("UNDO"))">Undo last command</button>
    <button @onclick="@(() => OnClickCommand("CLEAR"))">Clear command queue</button>
<hr/>
<h5>Motorer rover</h5>
<p>
    <button @onclick="@(() => OnClickCommand("motor 1000 100 VF 1 HF 1 VB 1 HB 1"))">Kjør alle motorer</button>
</p>
<br />
<h5>Styring rover</h5>
<p>
    <button @onclick="@(() => OnClickCommand("servo VF 90","servo HF 90","servo VB 90","servo HB 90"))">Rett fram</button>
    <button @onclick="@(() => OnClickCommand("servo VF 45","servo HF 45","servo VB 45","servo HB 45"))">Servos 45</button>
</p>
<br />

@code {
    private List<RoverMessage>? Messages;
    private string? Error;
    private string? InputValue;

    protected override async Task OnInitializedAsync()
    {
        if (!Rover.IsOpen)
        {
            Rover.Open();
        }

        if (!Rover.IsOpen)
        {
            Error = "Could not open Com port";
            return;
        }
        Messages = new List<RoverMessage>();
        Rover.MessageReceived += MessageReceived;
    }

    void IDisposable.Dispose()
    {
        if(Rover != null)
        {
            Rover.MessageReceived -= MessageReceived;   
        }
    }


    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SendMessage();
            return;
        }
    }

    private void OnClickCommand(params string[] commands)
    {
        foreach(string command in commands)
        {
            SendMessage(command);
            Thread.Sleep(100);
        }
    }

    private void OnClickSend(MouseEventArgs mouseEventArgs)
    {
        SendMessage();
    }

    private void SendMessage(string command)
    {
        Rover.Send(command);
        AddMessage(new RoverMessage(command, "#000000"));
    }

    private void AddMessage(RoverMessage message)
    {
        Messages.Add(message);
        while(Messages.Count > 100)
        {
            Messages.RemoveAt(0);
        }

        AutoScroll();
    }

    private void SendMessage()
    {
        if (InputValue == null || Messages == null) return;
        SendMessage(InputValue);
        InputValue = null;
    }

    private void MessageReceived(object? sender, RoverMessageReceivedEventArgs e)
    {
        if (Messages == null) return;
        if (e.Message.StartsWith("$$"))
        {
            AddMessage(new RoverMessage(e.Message.Substring(2), "#ff0000"));
        }
        else
        {
            AddMessage(new RoverMessage(e.Message, "#0B8C00"));
        }
        InvokeAsync(StateHasChanged);
        AutoScroll();
    }

    private void AutoScroll()
    {
        InvokeAsync(() => { JS.InvokeVoidAsync("AutoScrollMessageBox", null); });
    }
}
